// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.findyourjob.domain;

import es.uca.iw.findyourjob.domain.Formacion;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Formacion_Roo_Finder {
    
    public static Long Formacion.countFindFormacionsByCursosIdiomasAndTitulosAcademicos(String cursosIdiomas, String titulosAcademicos) {
        if (cursosIdiomas == null || cursosIdiomas.length() == 0) throw new IllegalArgumentException("The cursosIdiomas argument is required");
        if (titulosAcademicos == null || titulosAcademicos.length() == 0) throw new IllegalArgumentException("The titulosAcademicos argument is required");
        EntityManager em = Formacion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Formacion AS o WHERE o.cursosIdiomas = :cursosIdiomas AND o.titulosAcademicos = :titulosAcademicos", Long.class);
        q.setParameter("cursosIdiomas", cursosIdiomas);
        q.setParameter("titulosAcademicos", titulosAcademicos);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Formacion> Formacion.findFormacionsByCursosIdiomasAndTitulosAcademicos(String cursosIdiomas, String titulosAcademicos) {
        if (cursosIdiomas == null || cursosIdiomas.length() == 0) throw new IllegalArgumentException("The cursosIdiomas argument is required");
        if (titulosAcademicos == null || titulosAcademicos.length() == 0) throw new IllegalArgumentException("The titulosAcademicos argument is required");
        EntityManager em = Formacion.entityManager();
        TypedQuery<Formacion> q = em.createQuery("SELECT o FROM Formacion AS o WHERE o.cursosIdiomas = :cursosIdiomas AND o.titulosAcademicos = :titulosAcademicos", Formacion.class);
        q.setParameter("cursosIdiomas", cursosIdiomas);
        q.setParameter("titulosAcademicos", titulosAcademicos);
        return q;
    }
    
    public static TypedQuery<Formacion> Formacion.findFormacionsByCursosIdiomasAndTitulosAcademicos(String cursosIdiomas, String titulosAcademicos, String sortFieldName, String sortOrder) {
        if (cursosIdiomas == null || cursosIdiomas.length() == 0) throw new IllegalArgumentException("The cursosIdiomas argument is required");
        if (titulosAcademicos == null || titulosAcademicos.length() == 0) throw new IllegalArgumentException("The titulosAcademicos argument is required");
        EntityManager em = Formacion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Formacion AS o WHERE o.cursosIdiomas = :cursosIdiomas AND o.titulosAcademicos = :titulosAcademicos");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Formacion> q = em.createQuery(queryBuilder.toString(), Formacion.class);
        q.setParameter("cursosIdiomas", cursosIdiomas);
        q.setParameter("titulosAcademicos", titulosAcademicos);
        return q;
    }
    
}
