// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.findyourjob.domain;

import es.uca.iw.findyourjob.domain.Empresa;
import es.uca.iw.findyourjob.domain.Localizacion;
import es.uca.iw.findyourjob.domain.Oferta;
import es.uca.iw.findyourjob.domain.Puesto;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Oferta_Roo_Finder {
    
    public static Long Oferta.countFindOfertasByEmpresa(Empresa empresa) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.empresa = :empresa", Long.class);
        q.setParameter("empresa", empresa);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Oferta.countFindOfertasByPerfil(String perfil) {
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.perfil = :perfil", Long.class);
        q.setParameter("perfil", perfil);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Oferta.countFindOfertasByPuestoTrabajo(Puesto puestoTrabajo) {
        if (puestoTrabajo == null) throw new IllegalArgumentException("The puestoTrabajo argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.puestoTrabajo = :puestoTrabajo", Long.class);
        q.setParameter("puestoTrabajo", puestoTrabajo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Oferta.countFindOfertasByTipologiaAndSueldoBrutoAndVacantes(String tipologia, Float sueldoBruto, String vacantes) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes", Long.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Oferta.countFindOfertasByTipologiaAndSueldoBrutoAndVacantesAndPerfilAndFechaInicioActividadAndFechaDisponibleInicioAndEstado(String tipologia, Float sueldoBruto, String vacantes, String perfil, String fechaInicioActividad, String fechaDisponibleInicio, String estado) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        if (fechaInicioActividad == null || fechaInicioActividad.length() == 0) throw new IllegalArgumentException("The fechaInicioActividad argument is required");
        if (fechaDisponibleInicio == null || fechaDisponibleInicio.length() == 0) throw new IllegalArgumentException("The fechaDisponibleInicio argument is required");
        if (estado == null || estado.length() == 0) throw new IllegalArgumentException("The estado argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes AND o.perfil = :perfil AND o.fechaInicioActividad = :fechaInicioActividad AND o.fechaDisponibleInicio = :fechaDisponibleInicio AND o.estado = :estado", Long.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        q.setParameter("perfil", perfil);
        q.setParameter("fechaInicioActividad", fechaInicioActividad);
        q.setParameter("fechaDisponibleInicio", fechaDisponibleInicio);
        q.setParameter("estado", estado);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Oferta.countFindOfertasByTipologiaAndSueldoBrutoAndVacantesAndPerfilAndFechaInicioActividadAndFechaDisponibleInicioAndEstadoAndLocalizacionAndEmpresaAndPuestoTrabajo(String tipologia, Float sueldoBruto, String vacantes, String perfil, String fechaInicioActividad, String fechaDisponibleInicio, String estado, Localizacion localizacion, Empresa empresa, Puesto puestoTrabajo) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        if (fechaInicioActividad == null || fechaInicioActividad.length() == 0) throw new IllegalArgumentException("The fechaInicioActividad argument is required");
        if (fechaDisponibleInicio == null || fechaDisponibleInicio.length() == 0) throw new IllegalArgumentException("The fechaDisponibleInicio argument is required");
        if (estado == null || estado.length() == 0) throw new IllegalArgumentException("The estado argument is required");
        if (localizacion == null) throw new IllegalArgumentException("The localizacion argument is required");
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (puestoTrabajo == null) throw new IllegalArgumentException("The puestoTrabajo argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes AND o.perfil = :perfil AND o.fechaInicioActividad = :fechaInicioActividad AND o.fechaDisponibleInicio = :fechaDisponibleInicio AND o.estado = :estado AND o.localizacion = :localizacion AND o.empresa = :empresa AND o.puestoTrabajo = :puestoTrabajo", Long.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        q.setParameter("perfil", perfil);
        q.setParameter("fechaInicioActividad", fechaInicioActividad);
        q.setParameter("fechaDisponibleInicio", fechaDisponibleInicio);
        q.setParameter("estado", estado);
        q.setParameter("localizacion", localizacion);
        q.setParameter("empresa", empresa);
        q.setParameter("puestoTrabajo", puestoTrabajo);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByEmpresa(Empresa empresa) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.empresa = :empresa", Oferta.class);
        q.setParameter("empresa", empresa);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByEmpresa(Empresa empresa, String sortFieldName, String sortOrder) {
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.empresa = :empresa");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("empresa", empresa);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByPerfil(String perfil) {
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.perfil = :perfil", Oferta.class);
        q.setParameter("perfil", perfil);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByPerfil(String perfil, String sortFieldName, String sortOrder) {
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.perfil = :perfil");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("perfil", perfil);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByPuestoTrabajo(Puesto puestoTrabajo) {
        if (puestoTrabajo == null) throw new IllegalArgumentException("The puestoTrabajo argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.puestoTrabajo = :puestoTrabajo", Oferta.class);
        q.setParameter("puestoTrabajo", puestoTrabajo);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByPuestoTrabajo(Puesto puestoTrabajo, String sortFieldName, String sortOrder) {
        if (puestoTrabajo == null) throw new IllegalArgumentException("The puestoTrabajo argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.puestoTrabajo = :puestoTrabajo");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("puestoTrabajo", puestoTrabajo);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByTipologiaAndSueldoBrutoAndVacantes(String tipologia, Float sueldoBruto, String vacantes) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes", Oferta.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByTipologiaAndSueldoBrutoAndVacantes(String tipologia, Float sueldoBruto, String vacantes, String sortFieldName, String sortOrder) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByTipologiaAndSueldoBrutoAndVacantesAndPerfilAndFechaInicioActividadAndFechaDisponibleInicioAndEstado(String tipologia, Float sueldoBruto, String vacantes, String perfil, String fechaInicioActividad, String fechaDisponibleInicio, String estado) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        if (fechaInicioActividad == null || fechaInicioActividad.length() == 0) throw new IllegalArgumentException("The fechaInicioActividad argument is required");
        if (fechaDisponibleInicio == null || fechaDisponibleInicio.length() == 0) throw new IllegalArgumentException("The fechaDisponibleInicio argument is required");
        if (estado == null || estado.length() == 0) throw new IllegalArgumentException("The estado argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes AND o.perfil = :perfil AND o.fechaInicioActividad = :fechaInicioActividad AND o.fechaDisponibleInicio = :fechaDisponibleInicio AND o.estado = :estado", Oferta.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        q.setParameter("perfil", perfil);
        q.setParameter("fechaInicioActividad", fechaInicioActividad);
        q.setParameter("fechaDisponibleInicio", fechaDisponibleInicio);
        q.setParameter("estado", estado);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByTipologiaAndSueldoBrutoAndVacantesAndPerfilAndFechaInicioActividadAndFechaDisponibleInicioAndEstado(String tipologia, Float sueldoBruto, String vacantes, String perfil, String fechaInicioActividad, String fechaDisponibleInicio, String estado, String sortFieldName, String sortOrder) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        if (fechaInicioActividad == null || fechaInicioActividad.length() == 0) throw new IllegalArgumentException("The fechaInicioActividad argument is required");
        if (fechaDisponibleInicio == null || fechaDisponibleInicio.length() == 0) throw new IllegalArgumentException("The fechaDisponibleInicio argument is required");
        if (estado == null || estado.length() == 0) throw new IllegalArgumentException("The estado argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes AND o.perfil = :perfil AND o.fechaInicioActividad = :fechaInicioActividad AND o.fechaDisponibleInicio = :fechaDisponibleInicio AND o.estado = :estado");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        q.setParameter("perfil", perfil);
        q.setParameter("fechaInicioActividad", fechaInicioActividad);
        q.setParameter("fechaDisponibleInicio", fechaDisponibleInicio);
        q.setParameter("estado", estado);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByTipologiaAndSueldoBrutoAndVacantesAndPerfilAndFechaInicioActividadAndFechaDisponibleInicioAndEstadoAndLocalizacionAndEmpresaAndPuestoTrabajo(String tipologia, Float sueldoBruto, String vacantes, String perfil, String fechaInicioActividad, String fechaDisponibleInicio, String estado, Localizacion localizacion, Empresa empresa, Puesto puestoTrabajo) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        if (fechaInicioActividad == null || fechaInicioActividad.length() == 0) throw new IllegalArgumentException("The fechaInicioActividad argument is required");
        if (fechaDisponibleInicio == null || fechaDisponibleInicio.length() == 0) throw new IllegalArgumentException("The fechaDisponibleInicio argument is required");
        if (estado == null || estado.length() == 0) throw new IllegalArgumentException("The estado argument is required");
        if (localizacion == null) throw new IllegalArgumentException("The localizacion argument is required");
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (puestoTrabajo == null) throw new IllegalArgumentException("The puestoTrabajo argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes AND o.perfil = :perfil AND o.fechaInicioActividad = :fechaInicioActividad AND o.fechaDisponibleInicio = :fechaDisponibleInicio AND o.estado = :estado AND o.localizacion = :localizacion AND o.empresa = :empresa AND o.puestoTrabajo = :puestoTrabajo", Oferta.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        q.setParameter("perfil", perfil);
        q.setParameter("fechaInicioActividad", fechaInicioActividad);
        q.setParameter("fechaDisponibleInicio", fechaDisponibleInicio);
        q.setParameter("estado", estado);
        q.setParameter("localizacion", localizacion);
        q.setParameter("empresa", empresa);
        q.setParameter("puestoTrabajo", puestoTrabajo);
        return q;
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByTipologiaAndSueldoBrutoAndVacantesAndPerfilAndFechaInicioActividadAndFechaDisponibleInicioAndEstadoAndLocalizacionAndEmpresaAndPuestoTrabajo(String tipologia, Float sueldoBruto, String vacantes, String perfil, String fechaInicioActividad, String fechaDisponibleInicio, String estado, Localizacion localizacion, Empresa empresa, Puesto puestoTrabajo, String sortFieldName, String sortOrder) {
        if (tipologia == null || tipologia.length() == 0) throw new IllegalArgumentException("The tipologia argument is required");
        if (sueldoBruto == null) throw new IllegalArgumentException("The sueldoBruto argument is required");
        if (vacantes == null || vacantes.length() == 0) throw new IllegalArgumentException("The vacantes argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        if (fechaInicioActividad == null || fechaInicioActividad.length() == 0) throw new IllegalArgumentException("The fechaInicioActividad argument is required");
        if (fechaDisponibleInicio == null || fechaDisponibleInicio.length() == 0) throw new IllegalArgumentException("The fechaDisponibleInicio argument is required");
        if (estado == null || estado.length() == 0) throw new IllegalArgumentException("The estado argument is required");
        if (localizacion == null) throw new IllegalArgumentException("The localizacion argument is required");
        if (empresa == null) throw new IllegalArgumentException("The empresa argument is required");
        if (puestoTrabajo == null) throw new IllegalArgumentException("The puestoTrabajo argument is required");
        EntityManager em = Oferta.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Oferta AS o WHERE o.tipologia = :tipologia AND o.sueldoBruto = :sueldoBruto AND o.vacantes = :vacantes AND o.perfil = :perfil AND o.fechaInicioActividad = :fechaInicioActividad AND o.fechaDisponibleInicio = :fechaDisponibleInicio AND o.estado = :estado AND o.localizacion = :localizacion AND o.empresa = :empresa AND o.puestoTrabajo = :puestoTrabajo");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Oferta> q = em.createQuery(queryBuilder.toString(), Oferta.class);
        q.setParameter("tipologia", tipologia);
        q.setParameter("sueldoBruto", sueldoBruto);
        q.setParameter("vacantes", vacantes);
        q.setParameter("perfil", perfil);
        q.setParameter("fechaInicioActividad", fechaInicioActividad);
        q.setParameter("fechaDisponibleInicio", fechaDisponibleInicio);
        q.setParameter("estado", estado);
        q.setParameter("localizacion", localizacion);
        q.setParameter("empresa", empresa);
        q.setParameter("puestoTrabajo", puestoTrabajo);
        return q;
    }
    
}
