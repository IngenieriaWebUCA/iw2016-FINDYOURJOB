// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.findyourjob.domain;

import es.uca.iw.findyourjob.domain.Inscripcion;
import es.uca.iw.findyourjob.domain.Oferta;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Inscripcion_Roo_Finder {
    
    public static Long Inscripcion.countFindInscripcionsByOferta(Oferta oferta) {
        if (oferta == null) throw new IllegalArgumentException("The oferta argument is required");
        EntityManager em = Inscripcion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Inscripcion AS o WHERE o.oferta = :oferta", Long.class);
        q.setParameter("oferta", oferta);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Inscripcion> Inscripcion.findInscripcionsByOferta(Oferta oferta) {
        if (oferta == null) throw new IllegalArgumentException("The oferta argument is required");
        EntityManager em = Inscripcion.entityManager();
        TypedQuery<Inscripcion> q = em.createQuery("SELECT o FROM Inscripcion AS o WHERE o.oferta = :oferta", Inscripcion.class);
        q.setParameter("oferta", oferta);
        return q;
    }
    
    public static TypedQuery<Inscripcion> Inscripcion.findInscripcionsByOferta(Oferta oferta, String sortFieldName, String sortOrder) {
        if (oferta == null) throw new IllegalArgumentException("The oferta argument is required");
        EntityManager em = Inscripcion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Inscripcion AS o WHERE o.oferta = :oferta");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Inscripcion> q = em.createQuery(queryBuilder.toString(), Inscripcion.class);
        q.setParameter("oferta", oferta);
        return q;
    }
    
}
